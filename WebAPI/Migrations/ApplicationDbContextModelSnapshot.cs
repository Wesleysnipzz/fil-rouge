// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EzChess.forme.Forme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Formes", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebAPI.Models.Entities.Placement", b =>
                {
                    b.Property<string>("position")
                        .HasColumnType("text");

                    b.Property<Guid?>("FormeId")
                        .HasColumnType("uuid");

                    b.HasKey("position");

                    b.HasIndex("FormeId");

                    b.ToTable("Placements", (string)null);
                });

            modelBuilder.Entity("EzChess.forme.Carre", b =>
                {
                    b.HasBaseType("EzChess.forme.Forme");

                    b.Property<double>("Cote")
                        .HasColumnType("double precision");

                    b.ToTable("Carres", (string)null);
                });

            modelBuilder.Entity("EzChess.forme.Cercle", b =>
                {
                    b.HasBaseType("EzChess.forme.Forme");

                    b.Property<double>("Rayon")
                        .HasColumnType("double precision");

                    b.ToTable("Cercles", (string)null);
                });

            modelBuilder.Entity("EzChess.forme.Rectangle", b =>
                {
                    b.HasBaseType("EzChess.forme.Forme");

                    b.Property<double>("Largeur")
                        .HasColumnType("double precision");

                    b.Property<double>("Longueur")
                        .HasColumnType("double precision");

                    b.ToTable("Rectangles", (string)null);
                });

            modelBuilder.Entity("EzChess.forme.Triangle", b =>
                {
                    b.HasBaseType("EzChess.forme.Forme");

                    b.Property<double>("Cote")
                        .HasColumnType("double precision");

                    b.ToTable("Triangles", (string)null);
                });

            modelBuilder.Entity("WebAPI.Models.Entities.Placement", b =>
                {
                    b.HasOne("EzChess.forme.Forme", "Forme")
                        .WithMany()
                        .HasForeignKey("FormeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Forme");
                });

            modelBuilder.Entity("EzChess.forme.Carre", b =>
                {
                    b.HasOne("EzChess.forme.Forme", null)
                        .WithOne()
                        .HasForeignKey("EzChess.forme.Carre", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EzChess.forme.Cercle", b =>
                {
                    b.HasOne("EzChess.forme.Forme", null)
                        .WithOne()
                        .HasForeignKey("EzChess.forme.Cercle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EzChess.forme.Rectangle", b =>
                {
                    b.HasOne("EzChess.forme.Forme", null)
                        .WithOne()
                        .HasForeignKey("EzChess.forme.Rectangle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EzChess.forme.Triangle", b =>
                {
                    b.HasOne("EzChess.forme.Forme", null)
                        .WithOne()
                        .HasForeignKey("EzChess.forme.Triangle", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
